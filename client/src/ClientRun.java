import Client.Servant;import communication.Mediator;public class ClientRun {    public static void main(String[] args) throws InterruptedException {        Mediator mediator = new Mediator();        Servant servant = new Servant(mediator);        while (!servant.setConnection()){            Thread.sleep(1000);            System.out.println("Retrying connection.");            Thread.sleep(1000);            System.out.println("Retrying connection..");            Thread.sleep(1000);            System.out.println("Retrying connection...");        }    }        /*        Selector selector = Selector.open();        SocketChannel socketChannel = SocketChannel.open(new InetSocketAddress(InetAddress.getByName("localhost"),0xdead));        socketChannel.register(selector, SelectionKey.OP_READ);        Scanner dialog = new Scanner(System.in);        SocketChannel CLIENTSOCKET = SocketChannel.open(new InetSocketAddress(InetAddress.getByName("localhost"), 0xdead));        Client.Client client = new Client.Client(CLIENTSOCKET,dialog);        Thread clientThread = new Thread(() -> {            try {                client.startClient();            } catch (IOException e) {                e.printStackTrace();            }            while (true){            }        });        //proxyThread.start();        clientThread.start();    }        //Тут сниже уровнем находится выгребная яма.Здесь весь говнокод который лучше не трогать.Если необходимо-можно вытаскивать какие-то части.        // Но лучше разобрать и избавиться от этого |        //                                          V        /*        if(args.length < 2){            while (ip == null) {                System.out.print("Введите IP сервера: ");                ip = parseIP(dialog.nextLine());            }            while (port == -1) {                System.out.print("Введите порт сервера: ");                try {                    port = Integer.parseInt(dialog.nextLine());                } catch (InputMismatchException e) {                    System.err.println("Неправильный формат порта: порт - неотрицательное целое число!");                }            }        }        while (true) {            try {                CLIENTSOCKET = SocketChannel.open(new InetSocketAddress(InetAddress.getByAddress(ip), port));                System.out.println("Соединение установлено.");                break;            } catch (UnknownHostException e) {                System.err.println("Server with such ip and port hasn't been found!");                while (ip == null) {                    System.out.print("Введите IP сервера: ");                    ip = parseIP(dialog.nextLine());                }                while (port == -1) {                    System.out.print("Введите порт сервера: ");                    try {                        port = Integer.parseInt(dialog.nextLine());                    } catch (InputMismatchException f) {                        System.err.println("Неправильный формат порта: порт - неотрицательное целое число!");                    }                }            }        }         */    /*    byte[] ip = null; int port = -1;    Scanner dialog = new Scanner(System.in);    if (args.length < 2) {      // ввод порта и адреса через консоль      System.out.println("java -jar {jarname}.jar [ip] [port]");      System.out.println("e.g. java -jar program.jar 192.168.0.1 80");      while (ip == null) {        System.out.print("Введите IP сервера, к которому хотите подключиться: ");        ip = parseIP(dialog.nextLine());      }      while (port == -1) {        System.out.print("Введите порт, на котором работает сервер: ");        try {          port = Integer.parseInt(dialog.nextLine());        } catch (InputMismatchException e) { System.err.println("Неправильный формат числа: порт - неотрицательное целое число. Попробуйте снова"); }      }    } else {      // взятие порта и адреса из аргументов командной строки      try {        ip = parseIP(args[0]);      } catch (InputMismatchException e) {        System.err.println("Введенная строка не соответствует формату IPv4");        System.exit(1);      }      try {        port = Integer.parseInt(args[1]);        if (port < 0) {          System.err.println("Неправильно задан порт, порт - это неотрицательное целое число");          System.exit(1);        }      } catch (InputMismatchException e) {        System.err.println("Неправильный формат числа: порт - неотрицательное целое число.");        System.exit(1);      }    }    // устанавливаем подключение    try (            SocketChannel suck = SocketChannel.open(new InetSocketAddress(InetAddress.getByAddress(ip), port));            Scanner receiver = new Scanner(suck);            OutputStream sender = Channels.newOutputStream(suck);            InputStream catcher = Channels.newInputStream(suck);    ) {      while (true) {        System.out.print("Введите сообщение: ");        String message = dialog.nextLine();        // реализуем эхо        // отправляем байты на сервер        byte[] messageByte;        messageByte = message.getBytes();        sender.write(messageByte);        sender.flush();        System.out.println(catcher.read());      }      /*      // принимаем результат      while (!dialog.next().isEmpty()) {        dialog.nextLine();        if (receiver.hasNextLine()) {          message = receiver.nextLine();          System.out.println(message);          System.out.print("Введите сообщение: ");          message = dialog.nextLine();          messageByte = message.getBytes();          sender.write(messageByte);          sender.flush();        }      }    } catch (UnknownHostException e) {      e.printStackTrace();    } catch (IOException e) {      e.printStackTrace();    }     *//*    private static byte[] parseIP(String ip) throws InputMismatchException {        String[] bytes = ip.split("\\.");        if (bytes == null || bytes.length != 4) throw new InputMismatchException("Неправильный формат IPv4");        else {            byte[] result = new byte[4];            try {                int i = 0;                for (String b : bytes) {                    int number = Integer.parseInt(b);                    if (number > 255 || number < 0) throw new InputMismatchException("Неправильный формат IPv4. Число не лежит в диапазоне [0; 255]");                    result[i++] = (byte) number;                }            } catch (InputMismatchException e) {                if (!e.getMessage().equals("Неправильный формат IPv4. Число не лежит в диапазоне [0; 255]"))                    throw new InputMismatchException("Неправильный формат IPv4. Найдены недопустимые символы.");                else throw e;            }            return result;        }    } */}